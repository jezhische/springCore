CONFIGURATION WITH ANNOTATIONS
В <beans> добавляем:
xmlns:context="http://www.springframework.org/schema/context"
В xsi:schemaLocation= добавляем:
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-4.3.xsd
затем тег <context:annotation-config/> (внутри <beans>...</beans>, на месте ...)

todo @Autowired
@Autowired (required=false)
спринг-аннотация: отмечает конструктор, поле или метод как требующий автозаполнения инъекцией зависимости Spring.
Чтобы аннотация @Autowire присвоила переменной значения соответствующего bean'а, необходимо чтобы этот bean
либо был объявлен в xml конфигурации приложения, либо существовал класс с соответствующей иньекцией управления.
Стандартная аннотация, которая будет понятна и для других фреймворков, например, для jbos 7:
@Inject -- JSR 330
Разница в том, что для @Autowired можно установить атрибут required=false, тогда при отсутствии нужного бина
для внедрения будет установлено null (иначе получаем Exception)
public class App {
    @Autowired
    private Client client;
}
Вместо того, чтобы имплементировать Aware-интерфейсы, теперь для той же цели можно воспользоваться @Autowired -
с его помощью можно внедрить также внутренние объекты спринг, такие как BeanFactory, ApplicationContext,
ResourceLoader, ApplicationEventPublisher
            public class App {
                @Autowired      // field
                private Client client;

                @Autowired      // setter
                public void setLogger(...) {...}

                @Autowired      // constructor
                public App(Client client, ...) {...}
            }
Но при внедрении зависимостей через поля класса ( @Autowired
                                                  private Client client;) - ПРИ ОТСУТСТВИИ СЕТТЕРА очень сильно
усложняется Unit-тестирование, поскольку уже нет простого способа вставить mock.


todo @Qualifier("bean-name") (спринг-аннотация)
@Resource(name="...") -- JSR 250  (JDK-аннотация)
- если невозможно внедрить зависимости по типу (например, под тип интерфейса EventLogger подходит несколько бинов)
(рекомендуется внедрять через @Resource (но эту аннотацию нельзя поставить перед конструктором))
public class App {
    @Autowired
    @Qualifier ("fileEventLogger")
    private EventLogger defaultLogger;
}
Для уточнения аргументов при применении с методом с множественными аргументами:
@Autowired
    public void multipleArguments(@Qualifier("main") SetterAService setterAService,
            SetterBService setterBService) {}

todo @PostConstruct
todo @PreDestroy
    @PostConstruct
    public void init() throws Exception {}
    @PreDestroy
    private void destroy() {}
Эти аннотации м. ставить сразу перед несколькими методами, все выполнятся.

todo @Value("Hello there!") - внедрение простых значений (имя файла, имя клиента)
todo @Value(${client.id}) - из пропертис-файла

ОПРЕДЕЛЕНИЕ БИНОВ С ПОМОЩЬЮ АННОТАЦИЙ
todo @Component
todo @Service
todo @Repisitory
todo @Controller
(они не отличаются ничем)
Чтобы класс, помеченный такой аннотацией, попал в виде бина в контейнер, необходимо сказать спрингу, чтобы он
просканировал соответствующий package и его там нашел. Тег component-scan:
    <context:component-scan base-package="..."/>
- при создании контекста спринг найдет в пакете все классы с аннотацией @Component и т.д. и создаст их бины,
внедрив необходимые зависимости.
@Component("some name") (имя бина)
@Scope("prototype") - задать scope бина

Можно создать отдельный класс, с помощью которого будут создаваться бины:
todo @Configuration
public class AppConfig {
todo    @Bean
    public Client client() {
        return new Client()
    }
}
Затем в мэйне создаем контексты следующим образом:
        ApplicationContext ctxa = new AnnotationConfigApplicationContext(AppConfig.class); //сюда можно поместить
        // несколько классов, помеченных @Configuration, в которых создаются бины, напр., еще LoggersConfig.class...
Более гибко - воспользоваться методом register:
todo REGISTER
    (выкидывает ошибку - нет ни метода register, ни метода refresh)
//        ApplicationContext ctxa = new AnnotationConfigApplicationContext();
а вот так - работает:
        AnnotationConfigApplicationContext ctxa = new AnnotationConfigApplicationContext();
        ctxa.register(AppConfig.class);
        ctxa.register(LoggersConfig.class);
        ctxa.refresh(); // необходим для обновления контекста
// чтобы просканировать контекст и загрузить бины в контейнер - метод scan:
todo SCAN
        ctxa.scan("beans");
        ctxa.refresh();





