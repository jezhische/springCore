PROPERTIES FILE
    <!-- подключение properties: -->
    <bean class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="locations">
            <!-- <list value-type="client.properties"/> - можно так? -->
            <list>
                <!-- путь в данном случае определяется через директиву classpath, но можно чз. указание пути: -->
                <value>classpath:client.properties</value>
            </list>
        </property>

        <!-- игнорирование отсутствующих ресурсов - чтобы не выскочило исключение: -->
        <property name="ignoreResourceNotFound" value="true"/>

        <!-- systemPropertiesMode: по умолчанию _FALLBACK: если ключ не найден в property-файлах, то спринг попробует
         найти его в системных свойствах и переменных окружения - это чтобы оставить возможность переопределять значения
         свойств объектов через систем пропертиз, которые передаются при запуске приложения;
         _OVERRIDE: свойтсва системы будут просмотрены первыми (а значения в property-файле выступят тогда значениями
         по умолчанию); _NEVER - не будут никогда-->
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
    </bean>

 ПЕРЕДАЧА ЗНАЧЕНИЙ ИЗ PROPERTIES FILE:
        знак $ указывает контексту, что в фигурных скобках {} находится ключ из properties file:
            <bean id="client" class="clients.Client">
                <constructor-arg>
                    <value>${id}</value>
                </constructor-arg>
                <constructor-arg value="${name}"/>
                <!--<property name="fullName" value="Jeremy Boldwin"/>-->
                <property name="greetings" value="${greeting}"/>
            </bean>

ПОДКЛЮЧЕНИЕ УТИЛИТ:
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

    xmlns:util="http://www.springframework.org/schema/util"

    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd

        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-3.2.xsd">
</beans>

ИСПОЛЬЗОВАНИЕ UTIL NAMESPASE:
ИСПОЛЬЗОВАНИЕ КОНСТАНТЫ, определенной в каком-либо классе, в качестве аргумента конструктора или значения свойства (property):
            <property name="type">
                <util:constant static-field="java.lang.Math.PI"/>
            </property>

ОПРЕДЕЛЕНИЕ СПИСКА, MAP, НАБОРОВ СВОЙСТВ КАК ОТДЕЛЬНЫХ БИНОВ С ПОМОЩЬЮ UTIL NAMESPASE:
(возможность переиспользовать их несколько раз, обращаться к спискам как к отдельным сущностям, а не просто
как к полям класса, определенным в свойстве соответствующего бина или аргументе конструктора):
- с помощью тегов <util:properties.../>, <util:map.../>, <util:list.../>
    <!-- создание отдельного бина clientProps типа java.util.properties из файла "src/main/resources/client.properties": -->
    <util:properties id="clientProps" location="classpath:client.properties"/>
    <!-- создание map с соответствующими записями для использования в "app" как отдельного бина: -->
    <util:map id="loggerMap">
        <entry key="INFO" value-ref="consoleEventLogger"/>
        <entry key="ERROR" value-ref="combinedEventLogger"/>
    </util:map>
Можно также сразу указать класс этого map:
    <util:map id="loggerMap" map-class="java.util.TreeMap">
        .......
    </util:map>

СОКРАЩЕННАЯ ЗАПИСЬ СВОЙСТВ БИНОВ И АРГУМЕНТОВ КОНСТРУКТОРА:
 todo SCHEMA/P & SCHEMA/C
- чтобы указывать проперти и параметры конструктора не отдельными тегами, а с помощью атрибутов тега <bean>:
необходимо определить еще две схемы namespace:
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:c="http://www.springframework.org/schema/c"
- только что-то они не подгружаются! вот здесь http://forum.spring.io/forum/spring-projects/container/39221-p-namespace-move пишут:
One special namespace is not defined in an XSD file, and only exists in the core of Spring itself. The so-called
p-namespace doesn't need a schema definition and is an alternative way of configuring your properties
differently than the way you have seen so far.
ЭТО ОЗНАЧАЕТ, ЧТО ДАННЫЕ АДРЕСА не являются ссылками, указывающими на конкретный xmlns (namespace) ресурс (словарь),
а просто строками, резервирующими данные имена в namespace документа, и их не нужно указывать как ссылку в
xsi:schemaLocation= (xsi - это XML Schema Instance) (т.е. этот URI - это URN, а не URL)
ДАЛЕЕ: вместо отдельного тега <constructor-arg ref="client"/> пишем в теге бина:
(todo: обязательно должны быть сеттеры для переменных, иначе они не проставятся!)
     <bean id="app" class="App" c:client-ref="client">
                (если бы был не-ссылочный тип, то нужно писать просто
                 c:client="client" (а как, например, со стрингом? нужно попробовать, скорее всего, если
                 написать литерал, то -ref не нужно, а если это ссылка на переменную - то нужно) - см. ниже)
ЕЩЕ:
        <bean id="client" class="clients.Client" p:greetings="Hello">

todo Что касается schema/p: instead of <property name="myString" value="Setter Set"/> we could use
    <bean...p:myString="Setter Set"/>
todo Что касается schema/c: http://springinpractice.com/2012/04/26/the-spring-constructor-namespace-and-some-deep-thoughts
You can inject values, or else you can inject references using the -ref suffix.
    <bean id="usersConnectionRepository" class="org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository"
            c:dataSource-ref="dataSource" c:connectionFactoryLocator-ref="connectionFactoryLocator"
            c:textEncryptor-ref="textEncryptor" />
With p, the XML element name comes from the bean property name, but with constructors that’s not available.
todo Instead, for c we use the name of the constructor parameter itself.
So for JdbcUsersConnectionRepository we’re calling constructor that looks like this:
    public JdbcUsersConnectionRepository(DataSource dataSource, ConnectionFactoryLocator connectionFactoryLocator,
    TextEncryptor textEncryptor)
А вот это ${}, я так понимаю, назначение values (????) Или это КЛЮЧ ИЗ PROPERTIES-ФАЙЛА????:
     <bean id="connectionFactoryLocator"
            class="org.springframework.social.connect.support.ConnectionFactoryRegistry">
            <property name="connectionFactories">
                <list>
                    <bean class="org.springframework.social.github.connect.GitHubConnectionFactory"
                        c:clientId="${gitHub.clientId}"
                        c:clientSecret="${gitHub.clientSecret}" />
                </list>
            </property>
        </bean>
todo  Here’s why I think the Spring constructor namespace is a bad idea:
http://springinpractice.com/2012/05/07/springs-constructor-namespace-is-a-bad-idea/

todo AUTOWIRE - автоматическое связывание с подходящим бином:
    <bean id="..." class="..." autowire=".*."/>
        * byName        - Property name
        * byType        - Bean class in property (искать бин, класс которого подходит для этого проперти)
        * constructor   - Bean class in constructor (по типу через конструктор)
        * autodetect    - сначала происходит связывание в режиме ‘constructor’, а затем
        (если автосвязывание не произошло) в режиме ‘byType’.
    ограничения:
    - can't be used with primitives, String, and class
    - direct reference has higher priority

СВЯЗЬ КЛАССА СО СПРИНГ: ОПРЕДЕЛЕНИЕ, В КАКОМ КОНТЕКСТЕ НАХОДИТСЯ КЛАСС:
с помощью набора Aware-интерфейсов. Реализовав их, можно получить различную информацию от спринг во время инициализации
бина (ссылка на контекст, имя бина, сервлет-контекст...) Например:
public class Aaa implements ApplicationContextAware {
    public void setApplicationContext(ApplicationContext ctx) {...}
}
Какие бывают:
    * ApplicationContextAware
    * ApplicationEventPublisherAware
    * BeanFactoryAware
    * BeanNameAware
    * ResourceLoaderAware
    * ServletContextAware
    * .....

ЕСЛИ В КОДЕ НУЖНО РЕАГИРОВАТЬ НА СОБЫТИЯ КОНТЕКСТА (СОЗДАНИЕ, ЗАВЕРШЕНИЕ, ОБНОВЛЕНИЕ), спринг предоставляет специальный
интерфейс:
public class Monitor implements ApplicationListener {
    public void onApplicationEvent(ApplicationEvent event) {...}
}
    * ContextStartedEvent
    * ContextStoppedEvent
    * ContextRefreshedEvent
    * ContextClosedEvent


