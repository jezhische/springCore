<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">
<!--default-lazy-init="true">-->

    <import resource="loggers.xml"/>

    <!-- подключение properties: -->
    <bean class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="locations">
            <!-- <list value-type="client.properties"/> - можно так? -->
            <list>
                <!-- путь в данном случае определяется через директиву classpath, но можно чз. указание пути: -->
                <value>classpath:client.properties</value>
            </list>
        </property>
        <!-- игнорирование отсутствующих ресурсов - чтобы не выскочило исключение: -->
        <property name="ignoreResourceNotFound" value="true"/>
        <!-- systemPropertiesMode: по умолчанию _FALLBACK: если ключ не найден в property-файлах, то спринг попробует
         найти его в системных свойствах и переменных окружения; _OVERRIDE: свойтсва системы будут просмотрены первыми;
          _NEVER - не будут никогда-->
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
    </bean>

    <!-- bean creating -->
    <bean id="app" class="App">
        <constructor-arg ref="client"/>
        <constructor-arg ref="cacheFileEventLogger"/>
        <constructor-arg>
            <map>
                <entry key="INFO" value-ref="consoleEventLogger"/>
                <entry key="ERROR" value-ref="combinedEventLogger"/>
            </map>
        </constructor-arg>
        <property name="defaultLogger" ref="defaultLogger"/>
    </bean>

    <!-- знак $ указывает контексту, что в фигурных скобках {} находится ключ из properties file -->
    <bean id="client" class="clients.Client">
        <constructor-arg>
            <value>${id}</value>
        </constructor-arg>
        <constructor-arg value="${name}"/>
        <!--<property name="fullName" value="Jeremy Boldwin"/>-->
        <property name="greetings" value="${greeting}"/>
    </bean>

<!-- Prototype - new object on every bean call: -->
    <bean id="event" class="events.Event" scope="prototype">
        <!-- внутренний бин - виден только там, где он определен, поэтому не имеет имени или id - достучаться до него
         невозможно. Будет создаваться при создании event: -->
        <constructor-arg>
            <bean class="java.util.Date"/>
        </constructor-arg>
        <!--<constructor-arg ref="date"/>-->
        <!--<constructor-arg ref="df"/>-->
    </bean>

<!-- поскольку DateFormat - абстрактный класс, для создания его образца нужно воспользоваться статическим методом.
 Это возможно в spring с помощью использования factory-method: -->
    <bean id="dateFormat" class="java.text.DateFormat" factory-method="getDateTimeInstance"/>

</beans>
